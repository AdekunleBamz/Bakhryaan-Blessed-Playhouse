{
  "/index.html": "data:text/html;base64,PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+QmFraHJ5YWFuIEJsZXNzZWQgUGxheWhvdXNlIC0gQXJjYWRlIENvbGxlY3Rpb248L3RpdGxlPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJzdHlsZS5jc3MiPgogICAgPGxpbmsgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1PcmJpdHJvbjp3Z2h0QDQwMDs3MDA7OTAwJmZhbWlseT1FeG8rMjp3Z2h0QDMwMDs0MDA7NjAwJmRpc3BsYXk9c3dhcCIgcmVsPSJzdHlsZXNoZWV0Ij4KPC9oZWFkPgo8Ym9keT4KICAgIDxkaXYgY2xhc3M9ImdhbWUtY29udGFpbmVyIj4KICAgICAgICA8IS0tIEhlYWRlciBTZWN0aW9uIC0tPgogICAgICAgIDxoZWFkZXIgY2xhc3M9ImdhbWUtaGVhZGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9nby1jb250YWluZXIiPgogICAgICAgICAgICAgICAgPGgxIGNsYXNzPSJtYWluLXRpdGxlIj5CYWtocnlhYW4gQmxlc3NlZCBQbGF5aG91c2U8L2gxPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VidGl0bGUiPkJsZXNzZWQgR2FtaW5nIEV4cGVyaWVuY2U8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1jb250cm9scyI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJzb3VuZFRvZ2dsZSIgY2xhc3M9ImNvbnRyb2wtYnRuIj7wn5SKPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJmdWxsc2NyZWVuVG9nZ2xlIiBjbGFzcz0iY29udHJvbC1idG4iPuKbtjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2hlYWRlcj4KCiAgICAgICAgPCEtLSBHYW1lIFNlbGVjdGlvbiBNZW51IC0tPgogICAgICAgIDxkaXYgaWQ9ImdhbWVNZW51IiBjbGFzcz0iZ2FtZS1tZW51Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVudS10aXRsZSI+Q2hvb3NlIFlvdXIgQWR2ZW50dXJlPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtZ3JpZCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnYW1lLWNhcmQiIGRhdGEtZ2FtZT0ic25ha2UiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtaWNvbiI+8J+QjTwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoMz5OZW9uIFNuYWtlPC9oMz4KICAgICAgICAgICAgICAgICAgICA8cD5DbGFzc2ljIHNuYWtlIHdpdGggbmVvbiBhZXN0aGV0aWNzPC9wPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtc3RhdHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5IaWdoIFNjb3JlOiA8c3BhbiBpZD0ic25ha2VTY29yZSI+MDwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtY2FyZCIgZGF0YS1nYW1lPSJtZW1vcnkiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtaWNvbiI+8J+noDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoMz5NZW1vcnkgTWF0Y2g8L2gzPgogICAgICAgICAgICAgICAgICAgIDxwPlRlc3QgeW91ciBtZW1vcnkgd2l0aCBiZWF1dGlmdWwgY2FyZHM8L3A+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ2FtZS1zdGF0cyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkJlc3QgVGltZTogPHNwYW4gaWQ9Im1lbW9yeVRpbWUiPi0tPC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ2FtZS1jYXJkIiBkYXRhLWdhbWU9Im1hdGgiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtaWNvbiI+8J+UojwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoMz5RdWljayBNYXRoPC9oMz4KICAgICAgICAgICAgICAgICAgICA8cD5GYXN0LXBhY2VkIG1hdGhlbWF0aWNhbCBjaGFsbGVuZ2VzPC9wPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtc3RhdHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5MZXZlbDogPHNwYW4gaWQ9Im1hdGhMZXZlbCI+MTwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtY2FyZCIgZGF0YS1nYW1lPSJjb2xvciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ2FtZS1pY29uIj7wn46oPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGgzPkNvbG9yIFJ1c2g8L2gzPgogICAgICAgICAgICAgICAgICAgIDxwPk1hdGNoIGNvbG9ycyBpbiB0aGlzIGV4Y2l0aW5nIHJ1c2g8L3A+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ2FtZS1zdGF0cyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlNjb3JlOiA8c3BhbiBpZD0iY29sb3JTY29yZSI+MDwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtY2FyZCIgZGF0YS1nYW1lPSJ0ZXRyaXMiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtaWNvbiI+8J+nqTwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoMz5OZW9uIFRldHJpczwvaDM+CiAgICAgICAgICAgICAgICAgICAgPHA+Q2xhc3NpYyBibG9jayBzdGFja2luZyB3aXRoIG5lb24gZ2xvdzwvcD4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnYW1lLXN0YXRzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+TGluZXM6IDxzcGFuIGlkPSJ0ZXRyaXNMaW5lcyI+MDwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtY2FyZCIgZGF0YS1nYW1lPSJmbGFwcHkiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtaWNvbiI+8J+QpjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxoMz5GbGFwcHkgQmlyZDwvaDM+CiAgICAgICAgICAgICAgICAgICAgPHA+TmF2aWdhdGUgdGhyb3VnaCBuZW9uIHBpcGVzPC9wPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbWUtc3RhdHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TY29yZTogPHNwYW4gaWQ9ImZsYXBweVNjb3JlIj4wPC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSBHYW1lIENhbnZhcyBDb250YWluZXIgLS0+CiAgICAgICAgPGRpdiBpZD0iZ2FtZUNhbnZhcyIgY2xhc3M9ImdhbWUtY2FudmFzLWNvbnRhaW5lciIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ2FtZS1oZWFkZXItYmFyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9ImJhY2tUb01lbnUiIGNsYXNzPSJiYWNrLWJ0biI+4oaQIEJhY2sgdG8gTWVudTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ2FtZS1pbmZvIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iY3VycmVudEdhbWVOYW1lIj5HYW1lPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJnYW1lVGltZXIiPlRpbWU6IDAwOjAwPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnYW1lLWNvbnRyb2xzIj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJwYXVzZUdhbWUiIGNsYXNzPSJjb250cm9sLWJ0biI+4o+477iPPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0icmVzdGFydEdhbWUiIGNsYXNzPSJjb250cm9sLWJ0biI+8J+UhDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8Y2FudmFzIGlkPSJnYW1lQ2FudmFzRWxlbWVudCIgd2lkdGg9IjgwMCIgaGVpZ2h0PSI2MDAiPjwvY2FudmFzPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJnYW1lLW92ZXJsYXkiIGlkPSJnYW1lT3ZlcmxheSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im92ZXJsYXktY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgPGgyIGlkPSJvdmVybGF5VGl0bGUiPkdhbWUgT3ZlcjwvaDI+CiAgICAgICAgICAgICAgICAgICAgPHAgaWQ9Im92ZXJsYXlNZXNzYWdlIj5Zb3VyIHNjb3JlOiA8c3BhbiBpZD0ib3ZlcmxheVNjb3JlIj4wPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvdmVybGF5LWJ1dHRvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJwbGF5QWdhaW4iIGNsYXNzPSJidG4tcHJpbWFyeSI+UGxheSBBZ2FpbjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJiYWNrVG9NYWluIiBjbGFzcz0iYnRuLXNlY29uZGFyeSI+TWFpbiBNZW51PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDwhLS0gTG9hZGluZyBTY3JlZW4gLS0+CiAgICAgICAgPGRpdiBpZD0ibG9hZGluZ1NjcmVlbiIgY2xhc3M9ImxvYWRpbmctc2NyZWVuIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9hZGluZy1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxvYWRpbmctc3Bpbm5lciI+PC9kaXY+CiAgICAgICAgICAgICAgICA8aDI+TG9hZGluZyBCbGVzc2VkIFBsYXlob3VzZS4uLjwvaDI+CiAgICAgICAgICAgICAgICA8cD5QcmVwYXJpbmcgeW91ciBnYW1pbmcgZXhwZXJpZW5jZTwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDwhLS0gRm9vdGVyIC0tPgogICAgICAgIDxmb290ZXIgY2xhc3M9ImdhbWUtZm9vdGVyIj4KICAgICAgICAgICAgPHA+QnVpbHQgd2l0aCDinaTvuI8gYnkgPHN0cm9uZz5CYW16elN0dWRpbzwvc3Ryb25nPiBvbiA8c3Ryb25nPkJsZXNzIE5ldHdvcms8L3N0cm9uZz48L3A+CiAgICAgICAgPC9mb290ZXI+CiAgICA8L2Rpdj4KCiAgICA8c2NyaXB0IHNyYz0ic2NyaXB0LmpzIj48L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+Cg==",
  "/script.js": "data:application/javascript;base64,",
  "/style.css": "data:text/css;base64,"
}